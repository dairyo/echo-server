// Code generated by go-swagger; DO NOT EDIT.

package board

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListMessageHandlerFunc turns a function with the right signature into a list message handler
type ListMessageHandlerFunc func(ListMessageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListMessageHandlerFunc) Handle(params ListMessageParams) middleware.Responder {
	return fn(params)
}

// ListMessageHandler interface for that can handle valid list message params
type ListMessageHandler interface {
	Handle(ListMessageParams) middleware.Responder
}

// NewListMessage creates a new http.Handler for the list message operation
func NewListMessage(ctx *middleware.Context, handler ListMessageHandler) *ListMessage {
	return &ListMessage{Context: ctx, Handler: handler}
}

/* ListMessage swagger:route GET /board board listMessage

get list of message in a board.

*/
type ListMessage struct {
	Context *middleware.Context
	Handler ListMessageHandler
}

func (o *ListMessage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListMessageParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ListMessageOKBodyItems0 list message o k body items0
//
// swagger:model ListMessageOKBodyItems0
type ListMessageOKBodyItems0 struct {

	// id
	// Required: true
	ID *int64 `json:"id"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this list message o k body items0
func (o *ListMessageOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListMessageOKBodyItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *ListMessageOKBodyItems0) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list message o k body items0 based on context it is used
func (o *ListMessageOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListMessageOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListMessageOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res ListMessageOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
